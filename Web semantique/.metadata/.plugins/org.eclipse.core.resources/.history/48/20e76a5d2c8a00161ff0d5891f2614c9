/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;
import org.apache.jena.rdf.model.Literal;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.rdf.model.RDFNode;
import org.apache.jena.rdf.model.Resource;
import org.apache.jena.vocabulary.VCARD;
import org.apache.log4j.Logger;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 *
 * @author Alban Gaignard <alban.gaignard@cnrs.fr>
 */
public class SandboxTest {

    private static Logger logger = Logger.getLogger(SandboxTest.class);
    private static String personURI = "http://somewhere/JohnSmith";
    private static String fullName = "John Smith";

    public SandboxTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    // TODO add test methods here.
    // The methods must be annotated with annotation @Test. For example:
    //
    @Test
    public void hello() {

        logger.info("Testing Jena");

        // create an empty Model
        Model model = ModelFactory.createDefaultModel();
        // create the resource
        Resource johnSmith = model.createResource(personURI);
        // add the property
        johnSmith.addProperty(VCARD.FN, fullName);

//        String queryString = "Select * Where {?x ?p ?y}";
//        Query query = QueryFactory.create(queryString);
//        try (QueryExecution qexec = QueryExecutionFactory.create(query, model)) {
//            ResultSet results = qexec.execSelect();
//            for (; results.hasNext();) {
//                QuerySolution soln = results.nextSolution();
//                logger.info(soln.toString());
//                RDFNode x = soln.get("varName");       // Get a result variable by name.
//                Resource r = soln.getResource("VarR"); // Get a result variable - must be a resource
//                Literal l = soln.getLiteral("VarL");   // Get a result variable - must be a literal
//            }
//        }

        logger.info("Dump of the model");
        model.write(System.out, "TTL");
    }
}
